type BitcoinNetwork = variant { mainnet; regtest; testnet };
type Config = record {
  bitcoin_rpc_url : text;
  network : BitcoinNetwork;
  subscribers : vec principal;
};
type Error = variant { MaxOutpointsExceeded };
type EtchingAccountInfo = record {
  derive_path : text;
  pubkey : text;
  address : text;
};
type EtchingArgs = record {
  terms : opt OrdinalsTerms;
  turbo : bool;
  premine : opt nat;
  logo : opt LogoParams;
  rune_name : text;
  divisibility : opt nat8;
  premine_receiver : text;
  symbol : opt text;
};
type EtchingStateArgs = record {
  ecdsa_key_name : text;
  etching_fee : opt nat64;
  btc_network : BitcoinNetwork;
};
type EtchingUpgradeArgs = variant {
  Upgrade : opt EtchingStateArgs;
  Init : EtchingStateArgs;
};
type GetEtchingResult = record { confirmations : nat32; rune_id : text };
type LogoParams = record { content_type : text; content_base64 : text };
type OrdinalsTerms = record {
  cap : nat;
  height : record { opt nat64; opt nat64 };
  offset : record { opt nat64; opt nat64 };
  amount : nat;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : vec opt vec RuneBalance; Err : Error };
type Result_2 = variant { Ok; Err : text };
type RuneBalance = record {
  confirmations : nat32;
  divisibility : nat8;
  amount : nat;
  rune_id : text;
  symbol : opt text;
};
type RuneEntry = record {
  confirmations : nat32;
  mints : nat;
  terms : opt Terms;
  etching : text;
  turbo : bool;
  premine : nat;
  divisibility : nat8;
  spaced_rune : text;
  number : nat64;
  timestamp : nat64;
  block : nat64;
  burned : nat;
  rune_id : text;
  symbol : opt text;
};
type RunesIndexerArgs = variant { Upgrade : opt UpgradeArgs; Init : Config };
type SetTxFeePerVbyteArgs = record {
  low : nat64;
  high : nat64;
  medium : nat64;
};
type Terms = record {
  cap : opt nat;
  height : record { opt nat64; opt nat64 };
  offset : record { opt nat64; opt nat64 };
  amount : opt nat;
};
type UpgradeArgs = record {
  bitcoin_rpc_url : opt text;
  subscribers : opt vec principal;
};
type UtxoArgs = record { id : text; index : nat32; amount : nat64 };
service : (RunesIndexerArgs) -> {
  etching : (EtchingArgs) -> (Result);
  etching_fees : () -> (vec UtxoArgs) query;
  etching_post_upgrade : (EtchingUpgradeArgs) -> ();
  get_etching : (text) -> (opt GetEtchingResult) query;
  get_latest_block : () -> (nat32, text) query;
  get_rune : (text) -> (opt RuneEntry) query;
  get_rune_balances_for_outputs : (vec text) -> (Result_1) query;
  get_rune_by_id : (text) -> (opt RuneEntry) query;
  init_etching_sender_account : () -> (EtchingAccountInfo);
  set_etching_fee_utxos : (vec UtxoArgs) -> ();
  set_tx_fee_per_vbyte : (SetTxFeePerVbyteArgs) -> (Result_2);
}
